{
    "docs": [
        {
            "location": "/",
            "text": "JBiclustGE\n\n\nIs an application programming interface (API) developed in the Java language, that comprises 21 biclustering methods to be used in the context of gene expression data analysis. Currently, this application integrates the following biclustering algorithms:\n\n\n\n\nBayesian Biclustering Model\n (BBC)\n\n\nBicFinder\n\n\nBiMine+\n\n\nBIclustering by Correlated and Large number of Individual Clustered seeds\n (BICLIC)\n\n\nPlaid, Spectral, xMOTIFS, Cheng & Church using the R library \nbiclust\n as backend. \n\n\nBit-Pattern Biclustering Algorithm\n (BiBit)\n\n\nFLexible Overlapped biClustering (FLOC) using R library \nBicare\n as backend. \n\n\nCombinatorial Algorithm for Expression and Sequence-based Cluster Extraction\n (COALESCE)\n\n\nCorrelated Pattern Biclusters\n (CPB)\n\n\nDifferentially Expressed BIclusters\n (DeBi)\n\n\nFactor Analysis for Bicluster Acquisition\n (FABIA)\n\n\nIterative signature algorithm\n (ISA)\n\n\nOrder-preserving sub-matrices\n (OPSM)\n\n\nBiMax\n\n\nPenalized Plaid\n\n\nQUalitative BIClustering\n (QuBic)\n\n\nUniBic\n\n\nUBCLUST\n\n\n\n\nThis application also provides additional features such as:\n\n\n\n\nData preprocessing (Normalization, Standardization, Binarization, Missing values imputation).\n\n\nParallel execution of the algorithms (multithread attributes).\n\n\nBuilt-in frameworks for the Gene Set Enrichment Analysis (GSEA).\n\n\nEvaluation measures.\n\n\nGeneration of synthetic datasets.\n\n\nVisualization of biclustering results (Heatmaps and Parallel coordinates). \n\n\n\n\nComparison between features provided by JBiclustGE and other relevant biclustering frameworks\n\n\n\n\n\n\n\n\nFeature\n\n\nJBiclustGE\n\n\nBiCAT\n\n\nbiclust\n\n\nBiBench\n\n\nMTBA\n\n\n\n\n\n\n\n\n\n\nProgramming language\n\n\nJava\n\n\nJava\n\n\nR\n\n\nPython\n\n\nMatlab\n\n\n\n\n\n\nNumber Biclustering algorithms\n\n\n21\n\n\n6\n\n\n6\n\n\n12\n\n\n12\n\n\n\n\n\n\nGraphical Interface\n\n\nyes\n\n\nyes\n\n\nno\n\n\nno\n\n\nno\n\n\n\n\n\n\nRequires programming expertise\n\n\nno\n\n\nno\n\n\nyes\n\n\nyes\n\n\nyes\n\n\n\n\n\n\nVisualization features\n\n\nyes\n\n\nyes\n\n\nyes\n\n\nyes\n\n\nyes\n\n\n\n\n\n\nSynthetic data\n\n\nyes\n\n\nno\n\n\nno\n\n\nyes\n\n\nno\n\n\n\n\n\n\nBuilt-in gene enrichment analysis\n\n\nyes\n\n\nno\n\n\nno\n\n\nno\n\n\nno\n\n\n\n\n\n\nPost-Processing:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFiltering\n\n\nyes\n\n\nyes\n\n\nno\n\n\nyes\n\n\nno\n\n\n\n\n\n\nOverlap\n\n\nyes\n\n\nyes\n\n\nyes\n\n\nyes\n\n\nyes\n\n\n\n\n\n\nSimilarity\n\n\nyes\n\n\nno\n\n\nyes\n\n\nyes\n\n\nyes\n\n\n\n\n\n\nPairwise analysis\n\n\nyes\n\n\nyes\n\n\nno\n\n\nyes\n\n\nno\n\n\n\n\n\n\nCoherence\n\n\nyes\n\n\nno\n\n\nyes\n\n\nno\n\n\nno\n\n\n\n\n\n\nCoverage\n\n\nyes\n\n\nno\n\n\nno\n\n\nno\n\n\nno",
            "title": "Home"
        },
        {
            "location": "/#jbiclustge",
            "text": "Is an application programming interface (API) developed in the Java language, that comprises 21 biclustering methods to be used in the context of gene expression data analysis. Currently, this application integrates the following biclustering algorithms:   Bayesian Biclustering Model  (BBC)  BicFinder  BiMine+  BIclustering by Correlated and Large number of Individual Clustered seeds  (BICLIC)  Plaid, Spectral, xMOTIFS, Cheng & Church using the R library  biclust  as backend.   Bit-Pattern Biclustering Algorithm  (BiBit)  FLexible Overlapped biClustering (FLOC) using R library  Bicare  as backend.   Combinatorial Algorithm for Expression and Sequence-based Cluster Extraction  (COALESCE)  Correlated Pattern Biclusters  (CPB)  Differentially Expressed BIclusters  (DeBi)  Factor Analysis for Bicluster Acquisition  (FABIA)  Iterative signature algorithm  (ISA)  Order-preserving sub-matrices  (OPSM)  BiMax  Penalized Plaid  QUalitative BIClustering  (QuBic)  UniBic  UBCLUST   This application also provides additional features such as:   Data preprocessing (Normalization, Standardization, Binarization, Missing values imputation).  Parallel execution of the algorithms (multithread attributes).  Built-in frameworks for the Gene Set Enrichment Analysis (GSEA).  Evaluation measures.  Generation of synthetic datasets.  Visualization of biclustering results (Heatmaps and Parallel coordinates).",
            "title": "JBiclustGE"
        },
        {
            "location": "/#comparison-between-features-provided-by-jbiclustge-and-other-relevant-biclustering-frameworks",
            "text": "Feature  JBiclustGE  BiCAT  biclust  BiBench  MTBA      Programming language  Java  Java  R  Python  Matlab    Number Biclustering algorithms  21  6  6  12  12    Graphical Interface  yes  yes  no  no  no    Requires programming expertise  no  no  yes  yes  yes    Visualization features  yes  yes  yes  yes  yes    Synthetic data  yes  no  no  yes  no    Built-in gene enrichment analysis  yes  no  no  no  no    Post-Processing:         Filtering  yes  yes  no  yes  no    Overlap  yes  yes  yes  yes  yes    Similarity  yes  no  yes  yes  yes    Pairwise analysis  yes  yes  no  yes  no    Coherence  yes  no  yes  no  no    Coverage  yes  no  no  no  no",
            "title": "Comparison between features provided by JBiclustGE and other relevant biclustering frameworks"
        },
        {
            "location": "/configs/download/",
            "text": "Downloads\n\n\nJBiclustGE-GUI\n\n\nRequirements:\n\n\n\n\nJava SE Runtime Environment 8 64-bit\n\n\nR environment for statistical computing and graphics\n\n\n\n\nNote: In Linux you must to install the following packages: libcurl4-openssl-dev libssl-dev libxml2-dev\n\n\n sudo apt-get install libcurl4-openssl-dev libssl-dev libxml2-dev\n\n\n\nWarning:\n\n\nIf you are using version 3.4.2 of R software environment, please update to the most recent version 3.4.3, because many of the R packages needed by JBiclustGE presents errors during their installation, due to incompatibilities with version 3.4.2.\n\n\nTo install or update R to release 3.4.3 in linux, you can run this shell script: \nDownload\n  \n\n\nWindows and Linux Jar Installer\n\n\nThis installer works in both Operating Systems. \nDownload\n  \n\n\nInstructions: \n\n\n\n\nInstall Java SE Runtime Environment.\n\n\nInstall R environment. \n\n\nRun installer.\n\n\n\n\nFor Windows:\n\n\n    Press over \"jbiclustge-installer\", follow the instructions given by the installer.\n\n\n\nFor Linux: \n\n\n   First option: press the right button of the mouse over \"jbiclustge-installer.jar\", and choose \"Open with Oracle Java 8 Runtime\", follow the instructions given by the installer.\n\n   Second option: open the  linux console, input the following commands,\n       a) cd \"path to folder where jbiclustge-installer.jar its stored\", example \"cd /home/user/\"\n       b) java -jar jbiclustge-installer.jar\n       c) follow the instructions given by the installer\n\n\n\nLinux Deb installer\n\n\nDownload\n\n\nInstall with package manager, or through linux console:\n\n\n1. cd \"path to folder where jbiclustge.deb its stored\", example \"cd /home/user/\"\n2. sudo dpkg -i jbiclustge.deb\n\n\n\nNote: This process needs \"SuperUser\" privileges because the installation will be performed in opt/ directory. \n\n\nJBiclustGE-CLI\n\n\nRequirements:\n\n\n\n\nJava SE Runtime Environment 8 64-bit\n\n\nR environment for statistical computing and graphics\n\n\n\n\nWindows and Linux Jar Installer\n\n\nThis installer works in both Operating Systems. \nDownload\n\n\nInstructions: \n\n\n\n\nInstall Java SE Runtime Environment.\n\n\nRun installer.\n\n\n\n\nFor Windows:\n\n\n    1) Press over \"jbiclustge-cli-installer.jar\", follow the instructions given by the installer.\n    2) Open the folder where you have installed the JBiclustGE-CLI, example:  C:\\Users\\\"windows user\"\\JBiclustGE-CLI\n    3) Press over \"add_jbiclustge-cli_as_environment_variable\" that is inside \"JBiclustGE-CLI\" folder.\n    4) Open a Windows command line prompt \"cmd\".\n    5) write command \"jbiclustge-cli -h\" to see instructions.\n    6) write command \"jbiclustge-cli -conf\" to configure the JBiclustGE-CLI execution environment.\n\n\n\nFor Linux: \n\n\n   First option: press the right button of the mouse over \"jbiclustge-cli-installer.jar\", and choose \"Open with Oracle Java 8 Runtime\", follow the instructions given by the installer.\n\n   Second option: open the  linux console, input the following commands,\n       a) cd \"path to folder where jbiclustge-cli-installer.jar its stored\", example \"cd /home/user/\"\n       b) java -jar jbiclustge-cli-installer.jar\n       c) follow the instructions given by the installer\n\n   Configure jbiclustge-cli as environment variable:\n       a) Open the folder where you have installed the jbiclustge-cli.jar, by default installs in /home/\"your_linux_username\"/JBiclustGE-CLI\n       b) Open the linux console, write commands:\n\n              1) cd /home/\"your_linux_username\"/JBiclustGE-CLI\n              2) sh add_jbiclustge-cli_as_environment_variable.sh\n\n       c) close the current linux console, and open a new one.\n       d) write the following commands:\n\n              1) jbiclustge-cli -h  'this will allow you to check all the input commands'\n              2) jbiclustge-cli -conf choosefolder  'this will do the initial configuration of JBiclustGE-CLI, and all the necessary R packages will be installed in the directory that you have chosen'\n\n\n\nLinux Deb installer\n\n\nDownload\n\n\nInstall with package manager, or through linux console:\n\n\n\n\ncd \"path to folder where jbiclustge-cli.deb its stored\", example \"cd /home/user/\"\n\n\nsudo dpkg -i jbiclustge-cli.deb \n\n\n\n\nNote: This process needs \"SuperUser\" privileges because the installation will be performed in opt/ directory. \n\n\n  Configure jbiclustge-cli:\n      a) Open the linux console, write commands:\n\n          1) jbiclustge-cli -h  'this will allow you to check all the input commands'\n          2) jbiclustge-cli -conf choosefolder  'this will do the initial configuration of JBiclustGE-CLI, and all the necessary R packages will be installed in the directory that you have chosen'\n\n\n\n\n\n\nSource Code\n\n\nJBiclustGE API\n\n\nThe source code of JBiclustGE API it's in the following GitHub repository: \nlink\n\n\nMaven dependency:\n\n\n <dependency>\n        <groupId>pt.uminho.ceb.biosystems</groupId>\n        <artifactId>JBiclustGE</artifactId>\n        <version>1.0.0-SNAPSHOT</version>\n </dependency>\n\n\n\nadd the following repository to your pom:\n\n\n <repository>\n        <id>git-ornrocha</id>\n        <url>https://github.com/ornrocha/thirdparty/raw/master/mvn-repo</url>\n        <snapshots>\n            <enabled>true</enabled>\n            <updatePolicy>always</updatePolicy>\n        </snapshots>\n </repository>\n\n\n\nJBiclustGE-CLI and JBiclustGE-GUI\n\n\nThe executables concerning to JBiclustGE-GUI and JBiclustGE-CLI can be compiled directly from source code, the instructions are described in links presented below.\n\n\nThe source code of JBiclustGE-CLI it's in the following GitHub repository: \nlink\n\n\nThe source code of JBiclustGE-GUI it's in the following GitHub repository: \nlink",
            "title": "Downloads"
        },
        {
            "location": "/configs/download/#downloads",
            "text": "",
            "title": "Downloads"
        },
        {
            "location": "/configs/download/#jbiclustge-gui",
            "text": "",
            "title": "JBiclustGE-GUI"
        },
        {
            "location": "/configs/download/#requirements",
            "text": "Java SE Runtime Environment 8 64-bit  R environment for statistical computing and graphics   Note: In Linux you must to install the following packages: libcurl4-openssl-dev libssl-dev libxml2-dev   sudo apt-get install libcurl4-openssl-dev libssl-dev libxml2-dev",
            "title": "Requirements:"
        },
        {
            "location": "/configs/download/#warning",
            "text": "If you are using version 3.4.2 of R software environment, please update to the most recent version 3.4.3, because many of the R packages needed by JBiclustGE presents errors during their installation, due to incompatibilities with version 3.4.2.  To install or update R to release 3.4.3 in linux, you can run this shell script:  Download",
            "title": "Warning:"
        },
        {
            "location": "/configs/download/#windows-and-linux-jar-installer",
            "text": "This installer works in both Operating Systems.  Download     Instructions:    Install Java SE Runtime Environment.  Install R environment.   Run installer.   For Windows:      Press over \"jbiclustge-installer\", follow the instructions given by the installer.  For Linux:      First option: press the right button of the mouse over \"jbiclustge-installer.jar\", and choose \"Open with Oracle Java 8 Runtime\", follow the instructions given by the installer.\n\n   Second option: open the  linux console, input the following commands,\n       a) cd \"path to folder where jbiclustge-installer.jar its stored\", example \"cd /home/user/\"\n       b) java -jar jbiclustge-installer.jar\n       c) follow the instructions given by the installer",
            "title": "Windows and Linux Jar Installer"
        },
        {
            "location": "/configs/download/#linux-deb-installer",
            "text": "Download  Install with package manager, or through linux console:  1. cd \"path to folder where jbiclustge.deb its stored\", example \"cd /home/user/\"\n2. sudo dpkg -i jbiclustge.deb  Note: This process needs \"SuperUser\" privileges because the installation will be performed in opt/ directory.",
            "title": "Linux Deb installer"
        },
        {
            "location": "/configs/download/#jbiclustge-cli",
            "text": "",
            "title": "JBiclustGE-CLI"
        },
        {
            "location": "/configs/download/#requirements_1",
            "text": "Java SE Runtime Environment 8 64-bit  R environment for statistical computing and graphics",
            "title": "Requirements:"
        },
        {
            "location": "/configs/download/#windows-and-linux-jar-installer_1",
            "text": "This installer works in both Operating Systems.  Download  Instructions:    Install Java SE Runtime Environment.  Run installer.   For Windows:      1) Press over \"jbiclustge-cli-installer.jar\", follow the instructions given by the installer.\n    2) Open the folder where you have installed the JBiclustGE-CLI, example:  C:\\Users\\\"windows user\"\\JBiclustGE-CLI\n    3) Press over \"add_jbiclustge-cli_as_environment_variable\" that is inside \"JBiclustGE-CLI\" folder.\n    4) Open a Windows command line prompt \"cmd\".\n    5) write command \"jbiclustge-cli -h\" to see instructions.\n    6) write command \"jbiclustge-cli -conf\" to configure the JBiclustGE-CLI execution environment.  For Linux:      First option: press the right button of the mouse over \"jbiclustge-cli-installer.jar\", and choose \"Open with Oracle Java 8 Runtime\", follow the instructions given by the installer.\n\n   Second option: open the  linux console, input the following commands,\n       a) cd \"path to folder where jbiclustge-cli-installer.jar its stored\", example \"cd /home/user/\"\n       b) java -jar jbiclustge-cli-installer.jar\n       c) follow the instructions given by the installer\n\n   Configure jbiclustge-cli as environment variable:\n       a) Open the folder where you have installed the jbiclustge-cli.jar, by default installs in /home/\"your_linux_username\"/JBiclustGE-CLI\n       b) Open the linux console, write commands:\n\n              1) cd /home/\"your_linux_username\"/JBiclustGE-CLI\n              2) sh add_jbiclustge-cli_as_environment_variable.sh\n\n       c) close the current linux console, and open a new one.\n       d) write the following commands:\n\n              1) jbiclustge-cli -h  'this will allow you to check all the input commands'\n              2) jbiclustge-cli -conf choosefolder  'this will do the initial configuration of JBiclustGE-CLI, and all the necessary R packages will be installed in the directory that you have chosen'",
            "title": "Windows and Linux Jar Installer"
        },
        {
            "location": "/configs/download/#linux-deb-installer_1",
            "text": "Download  Install with package manager, or through linux console:   cd \"path to folder where jbiclustge-cli.deb its stored\", example \"cd /home/user/\"  sudo dpkg -i jbiclustge-cli.deb    Note: This process needs \"SuperUser\" privileges because the installation will be performed in opt/ directory.     Configure jbiclustge-cli:\n      a) Open the linux console, write commands:\n\n          1) jbiclustge-cli -h  'this will allow you to check all the input commands'\n          2) jbiclustge-cli -conf choosefolder  'this will do the initial configuration of JBiclustGE-CLI, and all the necessary R packages will be installed in the directory that you have chosen'",
            "title": "Linux Deb installer"
        },
        {
            "location": "/configs/download/#source-code",
            "text": "",
            "title": "Source Code"
        },
        {
            "location": "/configs/download/#jbiclustge-api",
            "text": "The source code of JBiclustGE API it's in the following GitHub repository:  link  Maven dependency:   <dependency>\n        <groupId>pt.uminho.ceb.biosystems</groupId>\n        <artifactId>JBiclustGE</artifactId>\n        <version>1.0.0-SNAPSHOT</version>\n </dependency>  add the following repository to your pom:   <repository>\n        <id>git-ornrocha</id>\n        <url>https://github.com/ornrocha/thirdparty/raw/master/mvn-repo</url>\n        <snapshots>\n            <enabled>true</enabled>\n            <updatePolicy>always</updatePolicy>\n        </snapshots>\n </repository>",
            "title": "JBiclustGE API"
        },
        {
            "location": "/configs/download/#jbiclustge-cli-and-jbiclustge-gui",
            "text": "The executables concerning to JBiclustGE-GUI and JBiclustGE-CLI can be compiled directly from source code, the instructions are described in links presented below.  The source code of JBiclustGE-CLI it's in the following GitHub repository:  link  The source code of JBiclustGE-GUI it's in the following GitHub repository:  link",
            "title": "JBiclustGE-CLI and JBiclustGE-GUI"
        },
        {
            "location": "/configs/install/",
            "text": "How to setup JBiclustGE\n\n\nRequirements\n\n\nIn order to have access to all the functionalities provided by JBiclustGE is important to install first the \nR environment\n in your computer. Thus, install the R environment  before the first execution of JBiclustGE. Otherwise, the JBiclustGE detects if the R environment it is installed or not and will advise you  to install it. \n\n\nThe computer must be connected to the internet. In the first execution, JBiclustGE will download and configure all the necessary R packages. \n\n\nNote: Users can install JBiclustGE without install the R environment, but some of the features and biclustering algorithms will not work.   \n\n\nJBiclustGE-GUI\n\n\nIn the first execution of JBiclustGE, it is presented the panel shown in figure 1. In this stage users can choose the folder where the R packages will be installed. If this option is set to \"Automatic\", these packages will be installed in a folder defined by JBiclustGE. \n\n\nThe necessary binaries of all algorithms will be downloaded from automatically from JBiclustGE website. However, users can provide the compressed file (zip) available in the \ndownloads section\n\n\n\n\nFigure 1: Panel to define the settings of JBiclustGE \n\n\nThis process will take some minutes to be completed, because it will install all the necessary R packages. \n\n\nJBiclustGE-CLI\n\n\nWindows\n\n\n\n\nOpen a Windows command line prompt \"cmd\".\n\n\n\n\nwrite command \"jbiclustge-cli -h\" and press enter, this will allow you to check all the input commands.\n\n\n\n\nFigure 3: Help command that show the list of input arguments\n\n\n\n\n\n\nwrite command \"jbiclustge-cli -conf choosefolder\" and press enter,  to configure the JBiclustGE-CLI execution environment.\n\n\n\n\nFigure 4: Window that help user to choose the folder, where the R packages will be installed\n\n\n\n\n\n\nLinux\n\n\n\n\nOpen the linux console\n\n\n\n\nwrite \"jbiclustge-cli -h\" and press enter, this will allow you to check all the input commands\n\n\n\n \nFigure 5: Help command that show the list of input arguments\n\n\n\n\n\n\nwrite \"jbiclustge-cli -conf choosefolder\" and press enter, this will do the initial configuration of JBiclustGE-CLI, and all the necessary R packages will be installed in the directory that you have chosen\n\n\n\n \nFigure 6: Window that help user to choose the folder, where the R packages will be installed",
            "title": "Setup"
        },
        {
            "location": "/configs/install/#how-to-setup-jbiclustge",
            "text": "",
            "title": "How to setup JBiclustGE"
        },
        {
            "location": "/configs/install/#requirements",
            "text": "In order to have access to all the functionalities provided by JBiclustGE is important to install first the  R environment  in your computer. Thus, install the R environment  before the first execution of JBiclustGE. Otherwise, the JBiclustGE detects if the R environment it is installed or not and will advise you  to install it.   The computer must be connected to the internet. In the first execution, JBiclustGE will download and configure all the necessary R packages.   Note: Users can install JBiclustGE without install the R environment, but some of the features and biclustering algorithms will not work.",
            "title": "Requirements"
        },
        {
            "location": "/configs/install/#jbiclustge-gui",
            "text": "In the first execution of JBiclustGE, it is presented the panel shown in figure 1. In this stage users can choose the folder where the R packages will be installed. If this option is set to \"Automatic\", these packages will be installed in a folder defined by JBiclustGE.   The necessary binaries of all algorithms will be downloaded from automatically from JBiclustGE website. However, users can provide the compressed file (zip) available in the  downloads section   Figure 1: Panel to define the settings of JBiclustGE   This process will take some minutes to be completed, because it will install all the necessary R packages.",
            "title": "JBiclustGE-GUI"
        },
        {
            "location": "/configs/install/#jbiclustge-cli",
            "text": "",
            "title": "JBiclustGE-CLI"
        },
        {
            "location": "/configs/install/#windows",
            "text": "Open a Windows command line prompt \"cmd\".   write command \"jbiclustge-cli -h\" and press enter, this will allow you to check all the input commands.   Figure 3: Help command that show the list of input arguments    write command \"jbiclustge-cli -conf choosefolder\" and press enter,  to configure the JBiclustGE-CLI execution environment.   Figure 4: Window that help user to choose the folder, where the R packages will be installed",
            "title": "Windows"
        },
        {
            "location": "/configs/install/#linux",
            "text": "Open the linux console   write \"jbiclustge-cli -h\" and press enter, this will allow you to check all the input commands  \n  Figure 5: Help command that show the list of input arguments    write \"jbiclustge-cli -conf choosefolder\" and press enter, this will do the initial configuration of JBiclustGE-CLI, and all the necessary R packages will be installed in the directory that you have chosen  \n  Figure 6: Window that help user to choose the folder, where the R packages will be installed",
            "title": "Linux"
        },
        {
            "location": "/manual/manualjbiclustgegui/",
            "text": "Graphical Interface Layout\n\n\nThe graphical interface of JbiclustGE is divided in three main areas as shown in figure 1:\n\n\nA) Is the menu that give access to all the functionalities present in this application. \n\n\nB) Is the clipboard, that stores the results (as a tree structure) of the operations that are exectuted along the analysis. The root of this tree represents a project. Must be highlighted that a project is regarding to only one gene expression dataset. Thus, for each gene expression dataset to be analysed, users must have to create a new project. \n\n\nC) Is the area where the results (concerning to the objects present in clipboard) are shown to the user.\n\n\n\n   \nFigure 1: Layout of JBiclustGE-GUI\n\n\nCreate New Project\n\n\n\n\n\n\nPress over \"New Project\"\n\n\n\n\n\n\n\n\nIn panel as presented in figure 2, there are two options:\n\n\n\n\n\"Load Example Dataset\", will open other panel with several examples of gene expression datasets (see next topic Example gene expression dataset).\n\n\n\"Open Gene Expression Dataset File\", to load a given gene expression dataset.\n\n\n\n\n\n\n\n\nThen, choose a name to your project. If your gene expression dataset has missing values, a warning will be shown in red saying that missing values were found. Then, you can choose a missing value imputation method, otherwise a green message will appear showing that data do not hava missing values. Add any note if you want and   press \"OK\".  \n\n\n\n\nFigure 2: Panel to create a new project\n\n\n\n\n\n\nYour new project is presented in a structure as shown in figure 3.\n\n\n\n\nFigure 3: Project created\n\n\n\n\n\n\nExample gene expression dataset\n\n\nSeveral examples of gene expression datasets can be used by users to assess the features provided in JBiclustGE. Each example has its own description regarding the organism, authors, the manuscript associated to gene expression datatset and other additional information. \n\n\n\n\nFigure 4: Loading example dataset\n\n\n\n\nBy pressing \"Open location\", will open the folder where these datasets are stored.\n\n\nBy pressing \"Open with default text editor\", the chosen dataset will be opened in default text editor of your operating system.  \n\n\n\n\nThese example datasets are available in the following zip file: \nDownload\n\n\nRun a Biclustering method\n\n\n\n\n\n\nOpen \"Run --> Biclustering method\"\n\n\n\n\n\n\n\n\nConfigure the chosen biclustering method (The figure below is an example)    \n\n\n\n\nExample: Fabia configuration panel\n\n\n\n\n\n\n(Optional) select \"Perform GSEA\" if you want to execute Gene Set Enrichment Analysis (GSEA) in runtime (after executing the biclustering method), and press \"Add GSEA configuration\" to add/configure the GSEA Engine.    \n\n\n\n\n\n\n\n\nPress \"Ok\" to execute.   \n\n\n\n\n\n\nBiclustering results\n\n\nAfter the execution of the biclustering algorithm, the results will be added to clipboard. Press on the respective object  to visualize these results. \n\n\n\n\nBicluster results panel\n\n\nThe list of biclusters obtained by a biclustering method is presented in the left side of the panel (as shown in figure bellow). In order to check the content of each bicluster, users must click on the corresponding bicluster. Moreover, that list of results can be exported/saved to files, or users can visualize the parallel coordinates or the heatmap of each one of the biclusters. Note: Parallel coordinates and heatmaps produced by \"ShinyHeatmaply\" are displayed in your browser, you have to  \"close viewer\" after the visualization, in order to shutdown the R process in background, avoiding the consuming of unnecessary computing resources.     \n\n\n\n\n### Search features\n\n\nUsers can search if a certain gene or condition was integrated in the biclusters obtained. If a gene/ condition is found, are displayed all the biclusters where that gene/ condition was detected.  \n\n\n\n\nGene and Condition frequencies can be also analysed.  \n\n\n\n\nBicluster analysis\n\n\nSeveral measurements can be performed on the biclusters obtained, as presented in figure below. \n\n\n\n\nRun Gene Set Enrichment Analysis (GSEA)\n\n\n\n\nOpen \"Analyis --> Enrichment Analysis\"\n\n\n\n\nChoose the GSEA engine: Ontologizer or topGO.\n\n\n\n\n\n\n\n\nGSEA engines\n\n\nOntologizer\n\n\n\n\nSelect a project and the respective list of the biclustering results.\n\n\nDefine the \"Ontology File\", provide an Url of a file available online or choose a file stored in your computer.\n\n\nDefine the \"Annotation File\", choose the annotation of an organism (annotations of the Gene Ontology Consortium) or use a file stored in your computer.   \n\n\nSelect the settings to be used in ontologizer (e.g: Gene ontology aspect, calculation method, etc...)\n\n\nPress \"Ok\" to execute.\n\n\n\n\n\n\nUsers can also save or load the configurations to/from a file.\n\n\ntopGO\n\n\nIn topGO you can use annotation packages that are available in \nCran\n or \nBioconductor\n websites, for that you must provide the name of that package. If it is an  \u201dorg.XX.XX\u201d annotation package you must define which is the type of gene identifiers that map to GO terms (\"Mapping type\" -->   Entrez,  GenBank,  Alias,  Ensembl,  Gene, Symbol, GeneName or UniGene. Read carefully the instructions of the respective package to choose correctly the \"mapping type\", or errors can occur during the analysis process).\n\n\nOther strategy is to use a \"Custom\" annotation (\nplease read topGO manual\n to learn how to build a custom annotation file).\n\n\n\n\nSelect a project and the respective list of the biclustering results.\n\n\nChoose the strategy to provide the annotation of the organism analysed (\"Use Annotation Database\" or \"Use a File With Annotation\").   \n\n\nSelect the settings to be used in topGO (e.g: ontology aspect, Algorithm, etc...)\n\n\n\n\nPress \"Ok\" to execute.\n\n\n\n\n\n\n\n\nGSEA Results\n\n\nTo view the results of the  Gene Set Enrichment Analysis, the user have to press over the pretended GSEA object, displayed in clipboard (as presented in the next figure).  \n\n\n\n\nThus, user can visualize the GSEA results calculated for each one of the biclusters. For that just press on the desired bicluster, and the results are displayed in the middle table, and the associated genes are presented in the table on the right. The p-value can be changed (only with values lower that were used in the analysis) which leads to an update of these tables.  \n\n\n\n\nThe frequencies of GO Terms can be analysed, for that,  just press on  \"Show GO Terms Frequency\". \n\n\n\n\nUsers can also visualize the percentage of enriched biclusters for a range of p-values, selected by them, or use the default p-values (5%, 1%, 0.1%, 0.01%, 0,001% and  0.0001%)",
            "title": "JBiclustGE-GUI"
        },
        {
            "location": "/manual/manualjbiclustgegui/#graphical-interface-layout",
            "text": "The graphical interface of JbiclustGE is divided in three main areas as shown in figure 1:  A) Is the menu that give access to all the functionalities present in this application.   B) Is the clipboard, that stores the results (as a tree structure) of the operations that are exectuted along the analysis. The root of this tree represents a project. Must be highlighted that a project is regarding to only one gene expression dataset. Thus, for each gene expression dataset to be analysed, users must have to create a new project.   C) Is the area where the results (concerning to the objects present in clipboard) are shown to the user.  \n    Figure 1: Layout of JBiclustGE-GUI",
            "title": "Graphical Interface Layout"
        },
        {
            "location": "/manual/manualjbiclustgegui/#create-new-project",
            "text": "Press over \"New Project\"     In panel as presented in figure 2, there are two options:   \"Load Example Dataset\", will open other panel with several examples of gene expression datasets (see next topic Example gene expression dataset).  \"Open Gene Expression Dataset File\", to load a given gene expression dataset.     Then, choose a name to your project. If your gene expression dataset has missing values, a warning will be shown in red saying that missing values were found. Then, you can choose a missing value imputation method, otherwise a green message will appear showing that data do not hava missing values. Add any note if you want and   press \"OK\".     Figure 2: Panel to create a new project    Your new project is presented in a structure as shown in figure 3.   Figure 3: Project created",
            "title": "Create New Project"
        },
        {
            "location": "/manual/manualjbiclustgegui/#example-gene-expression-dataset",
            "text": "Several examples of gene expression datasets can be used by users to assess the features provided in JBiclustGE. Each example has its own description regarding the organism, authors, the manuscript associated to gene expression datatset and other additional information.    Figure 4: Loading example dataset   By pressing \"Open location\", will open the folder where these datasets are stored.  By pressing \"Open with default text editor\", the chosen dataset will be opened in default text editor of your operating system.     These example datasets are available in the following zip file:  Download",
            "title": "Example gene expression dataset"
        },
        {
            "location": "/manual/manualjbiclustgegui/#run-a-biclustering-method",
            "text": "Open \"Run --> Biclustering method\"     Configure the chosen biclustering method (The figure below is an example)       Example: Fabia configuration panel    (Optional) select \"Perform GSEA\" if you want to execute Gene Set Enrichment Analysis (GSEA) in runtime (after executing the biclustering method), and press \"Add GSEA configuration\" to add/configure the GSEA Engine.         Press \"Ok\" to execute.",
            "title": "Run a Biclustering method"
        },
        {
            "location": "/manual/manualjbiclustgegui/#biclustering-results",
            "text": "After the execution of the biclustering algorithm, the results will be added to clipboard. Press on the respective object  to visualize these results.",
            "title": "Biclustering results"
        },
        {
            "location": "/manual/manualjbiclustgegui/#bicluster-results-panel",
            "text": "The list of biclusters obtained by a biclustering method is presented in the left side of the panel (as shown in figure bellow). In order to check the content of each bicluster, users must click on the corresponding bicluster. Moreover, that list of results can be exported/saved to files, or users can visualize the parallel coordinates or the heatmap of each one of the biclusters. Note: Parallel coordinates and heatmaps produced by \"ShinyHeatmaply\" are displayed in your browser, you have to  \"close viewer\" after the visualization, in order to shutdown the R process in background, avoiding the consuming of unnecessary computing resources.        ### Search features  Users can search if a certain gene or condition was integrated in the biclusters obtained. If a gene/ condition is found, are displayed all the biclusters where that gene/ condition was detected.     Gene and Condition frequencies can be also analysed.",
            "title": "Bicluster results panel"
        },
        {
            "location": "/manual/manualjbiclustgegui/#bicluster-analysis",
            "text": "Several measurements can be performed on the biclusters obtained, as presented in figure below.",
            "title": "Bicluster analysis"
        },
        {
            "location": "/manual/manualjbiclustgegui/#run-gene-set-enrichment-analysis-gsea",
            "text": "Open \"Analyis --> Enrichment Analysis\"   Choose the GSEA engine: Ontologizer or topGO.",
            "title": "Run Gene Set Enrichment Analysis (GSEA)"
        },
        {
            "location": "/manual/manualjbiclustgegui/#gsea-engines",
            "text": "",
            "title": "GSEA engines"
        },
        {
            "location": "/manual/manualjbiclustgegui/#ontologizer",
            "text": "Select a project and the respective list of the biclustering results.  Define the \"Ontology File\", provide an Url of a file available online or choose a file stored in your computer.  Define the \"Annotation File\", choose the annotation of an organism (annotations of the Gene Ontology Consortium) or use a file stored in your computer.     Select the settings to be used in ontologizer (e.g: Gene ontology aspect, calculation method, etc...)  Press \"Ok\" to execute.    Users can also save or load the configurations to/from a file.",
            "title": "Ontologizer"
        },
        {
            "location": "/manual/manualjbiclustgegui/#topgo",
            "text": "In topGO you can use annotation packages that are available in  Cran  or  Bioconductor  websites, for that you must provide the name of that package. If it is an  \u201dorg.XX.XX\u201d annotation package you must define which is the type of gene identifiers that map to GO terms (\"Mapping type\" -->   Entrez,  GenBank,  Alias,  Ensembl,  Gene, Symbol, GeneName or UniGene. Read carefully the instructions of the respective package to choose correctly the \"mapping type\", or errors can occur during the analysis process).  Other strategy is to use a \"Custom\" annotation ( please read topGO manual  to learn how to build a custom annotation file).   Select a project and the respective list of the biclustering results.  Choose the strategy to provide the annotation of the organism analysed (\"Use Annotation Database\" or \"Use a File With Annotation\").     Select the settings to be used in topGO (e.g: ontology aspect, Algorithm, etc...)   Press \"Ok\" to execute.",
            "title": "topGO"
        },
        {
            "location": "/manual/manualjbiclustgegui/#gsea-results",
            "text": "To view the results of the  Gene Set Enrichment Analysis, the user have to press over the pretended GSEA object, displayed in clipboard (as presented in the next figure).     Thus, user can visualize the GSEA results calculated for each one of the biclusters. For that just press on the desired bicluster, and the results are displayed in the middle table, and the associated genes are presented in the table on the right. The p-value can be changed (only with values lower that were used in the analysis) which leads to an update of these tables.     The frequencies of GO Terms can be analysed, for that,  just press on  \"Show GO Terms Frequency\".    Users can also visualize the percentage of enriched biclusters for a range of p-values, selected by them, or use the default p-values (5%, 1%, 0.1%, 0.01%, 0,001% and  0.0001%)",
            "title": "GSEA Results"
        },
        {
            "location": "/manual/manualjbiclustgecli/",
            "text": "Command-line\n\n\nAfter configuring the JbiclustGE-CLI as explained in the \nsetup section\n,  users can perform four diferent operations:\n\n\n\n\nEstablishment of a \"profile\", that is a configuration to execute the biclustering algorithms with a given gene expression dataset. This profile can be created in both JBiclustGE-GUI and JBiclustGE-CLI.\n\n\nExecution of the biclustering methods based on a \"profile\" configuration.\n\n\nEstablishment of a configuration to perform the Gene Set Enrichment Analysis (GSEA), of the results produced in the execution of a \"profile\".\n\n\nExecution of GSEA based on the previous configuration.  \n\n\n\n\nSetting up a Biclustering \"Profile\"\n\n\n\n\nOpen the Windows/Linux console\n\n\n\n\nWrite input command: \n\n\njbiclustge-cli -newprofile\n\n\n\n\n\n\n\nSeveral questions will be asked to the user, in order to build the configuration. \nImportant steps:\n\n\n\n\nThere is a step that is asked if gene expression has missing values, make sure if your dataset has missing values or not, because if the dataset has missing values and you define as not having missing values, that can lead to errors when you try to execute the algoritms in a later stage. \n\n\nWhen is asked which methods that you want to execute, you can choose \"all\", and delete the configuration file corresponding to the methods that you do not want to execute, in the \"algorithms\" folder.\n\n\nAfter creating your biclustering \"profile\" you have to configure the settings of each one the biclustering methods that are present in the \"algorithms\" folder, inside the folder that is shown in the final of the creation process of the \"profile\".\n\n\nIf you choose to execute the Gene Set Enrichment Analysis (GSEA) in runtime, you have also to configure the settings present in \"Ontologizer_configuration.conf\" or \"topGO_configuration.conf\" files (it will depend of the GSEA engine that you have chosen).\n\n\nThe gene expression dataset will be copied for the \"profile\" folder that you have defined, and be named as \"dataset\". \n\n\n\n\nRun a Biclustering \"Profile\"\n\n\nA \"profile\" can be loaded in two ways:\n\n\na) Directly, using the following command:\n\n\njbiclustge-cli -run /path_to_your_profile/\n\n\n\nb) Using a command to open a help graphical dialog for selecting the folder of a \"profile\".\n\n\njbiclustge-cli -run choosefolder\n\n\n\nSetting up a Gene Set Enrichment Analysis\n\n\n\n\nOpen the Windows/Linux console\n\n\n\n\nWrite input command:\n\n\njbiclustge-cli -newgsea\n\n\n\n\n\n\n\nSeveral questions will be asked to the user, in order to build the configuration.\n\n\n\n\nWhen is asked: \"Please set the path of the folder of executed profile\", choose the folder where the results of biclustering algorithms were saved, by default is a folder named as \"Results_biclustering\". \n\n\nWhen is asked: \"Please set the file path of the gene expression dataset, used in the biclustering analysis\", choose the gene expression datatset that was used in biclustering analysis, by default is the file \"dataset\" present in the \"profile\" folder. \n\n\nConfigure the settings present in \"Ontologizer_configuration.conf\" or \"topGO_configuration.conf\" files (it will depend of the GSEA engine that you have chosen).\n\n\n\n\nRun a Gene Set Enrichment Analysis\n\n\n\n\n\n\nWrite input command in console:\n\n\njbiclustge-cli -rungsea /path_to_gsea_configuration (Ontologizer_configuration.conf or topGO_configuration.conf)\n\n\n\n\n\n\n\nThe results will be saved within the corresponding folder of the biclustering results or in the folder defined by the user (if user have chosen in the previous configurations, to save in a custom folder).",
            "title": "JBiclustGE-CLI"
        },
        {
            "location": "/manual/manualjbiclustgecli/#command-line",
            "text": "After configuring the JbiclustGE-CLI as explained in the  setup section ,  users can perform four diferent operations:   Establishment of a \"profile\", that is a configuration to execute the biclustering algorithms with a given gene expression dataset. This profile can be created in both JBiclustGE-GUI and JBiclustGE-CLI.  Execution of the biclustering methods based on a \"profile\" configuration.  Establishment of a configuration to perform the Gene Set Enrichment Analysis (GSEA), of the results produced in the execution of a \"profile\".  Execution of GSEA based on the previous configuration.",
            "title": "Command-line"
        },
        {
            "location": "/manual/manualjbiclustgecli/#setting-up-a-biclustering-profile",
            "text": "Open the Windows/Linux console   Write input command:   jbiclustge-cli -newprofile    Several questions will be asked to the user, in order to build the configuration. \nImportant steps:   There is a step that is asked if gene expression has missing values, make sure if your dataset has missing values or not, because if the dataset has missing values and you define as not having missing values, that can lead to errors when you try to execute the algoritms in a later stage.   When is asked which methods that you want to execute, you can choose \"all\", and delete the configuration file corresponding to the methods that you do not want to execute, in the \"algorithms\" folder.  After creating your biclustering \"profile\" you have to configure the settings of each one the biclustering methods that are present in the \"algorithms\" folder, inside the folder that is shown in the final of the creation process of the \"profile\".  If you choose to execute the Gene Set Enrichment Analysis (GSEA) in runtime, you have also to configure the settings present in \"Ontologizer_configuration.conf\" or \"topGO_configuration.conf\" files (it will depend of the GSEA engine that you have chosen).  The gene expression dataset will be copied for the \"profile\" folder that you have defined, and be named as \"dataset\".",
            "title": "Setting up a Biclustering \"Profile\""
        },
        {
            "location": "/manual/manualjbiclustgecli/#run-a-biclustering-profile",
            "text": "A \"profile\" can be loaded in two ways:  a) Directly, using the following command:  jbiclustge-cli -run /path_to_your_profile/  b) Using a command to open a help graphical dialog for selecting the folder of a \"profile\".  jbiclustge-cli -run choosefolder",
            "title": "Run a Biclustering \"Profile\""
        },
        {
            "location": "/manual/manualjbiclustgecli/#setting-up-a-gene-set-enrichment-analysis",
            "text": "Open the Windows/Linux console   Write input command:  jbiclustge-cli -newgsea    Several questions will be asked to the user, in order to build the configuration.   When is asked: \"Please set the path of the folder of executed profile\", choose the folder where the results of biclustering algorithms were saved, by default is a folder named as \"Results_biclustering\".   When is asked: \"Please set the file path of the gene expression dataset, used in the biclustering analysis\", choose the gene expression datatset that was used in biclustering analysis, by default is the file \"dataset\" present in the \"profile\" folder.   Configure the settings present in \"Ontologizer_configuration.conf\" or \"topGO_configuration.conf\" files (it will depend of the GSEA engine that you have chosen).",
            "title": "Setting up a Gene Set Enrichment Analysis"
        },
        {
            "location": "/manual/manualjbiclustgecli/#run-a-gene-set-enrichment-analysis",
            "text": "Write input command in console:  jbiclustge-cli -rungsea /path_to_gsea_configuration (Ontologizer_configuration.conf or topGO_configuration.conf)    The results will be saved within the corresponding folder of the biclustering results or in the folder defined by the user (if user have chosen in the previous configurations, to save in a custom folder).",
            "title": "Run a Gene Set Enrichment Analysis"
        },
        {
            "location": "/manual/jbiclustgeapi/",
            "text": "JBiclustGE API\n\n\nThis section presents some examples of how to use JBiclustGE API, for helping the developers to use/extend the functionalities incorporated in this API. \n\n\nFor a detailed information of the classes implemented in this API, see the \ndocumentation\n.\n\n\nSetup\n\n\nJBiclustGE depends of several R packages to work properly, thus in the first time that JBiclustGE is executed needs to be always configured concerning to some operational aspects such as: R settings (mainly the folder to install the R packages), maximum allowed p-value, and other optional settings. There is an special class (JBiclustGESetupManager.class) that is responsible to configure, download the required algorithms/R packages,  and build the file (jbclustge.properties) that stores the settings of the application.\n\n\nImportant methods of class JBiclustGESetupManager:\n\n\n\n\n\n\nCheck if JbiclustGE Environment its configured:\n\n\n  boolean isconfigured= JBiclustGESetupManager.isJbiclustGEConfigured();\n\n\n\n\n\n\n\nSetup the required algorithms in JBiclustGE:\n\n\n JBiclustGESetupManager.setupJBiclustGEMethodsEnvironment(null)\n or \n JBiclustGESetupManager.setupJBiclustGEMethodsEnvironment(\"/path_chosen_by_user\");\n\n\n\n\n\n\n\nInitializes the jbiclustge.properties file:\n\n\nJBiclustGESetupManager.setupJBiclustGEProperties(\"Path to R library\");\n\n\n\n\n\n\n\nReset the previous configuration of JBiclustGE:\n\n\nJBiclustGESetupManager.resetPreviousConfiguration();\n\n\n\n\n\n\n\nBiclustering Algorithms\n\n\nAll the biclustering algorithms extends to a main abstract class (jbiclustge.methods.algorithms.AbstractBiclusteringAlgorithmCaller), that contains all the methods that are necessary to establish a biclustering method in this API. Figure below shows a generic UML scheme concerning to all the biclustering methods integrated in this API.\n\n\n\n\nExtending JBiclustGE with new biclustering methods:\n\n\nAll the biclustering algorithms have to extend to the abstract class \"AbstractBiclusteringAlgorithmCaller\". However, JBiclustGE follows a given structure (presented in figure above) for the incorporation of new biclustering methods, which is:\n\n\n\n\nAll the biclustering methods implemented in Java programming language extends directly to \"AbstractBiclusteringAlgorithmCaller\".\n\n\nAll the biclustering methods implemented in R programming language extends to class \"RBiclustAlgorithmCaller\".\n\n\nAll the biclustering methods implemented as binary executables using C, C++, Java, or other programming languages, have to extend to \"AbstractBiclusteringAlgorithmCaller\" and implement the interface \"IBiclustWrapper\".\n\n\n\n\nNote: in order to avoid the definition of environment variables in Java to external libraries (e.g. libraries produced by Java Native Interface), is advisable to create a parsing routine that transforms the output (file with the resulting biclusters) of a given algorithm to the format used by the JBiclustGE. \n\n\nIf you want to extend the JBiclustGE-GUI by including your new biclustering method, follow this \ninstructions\n\n\nGeneral procedure to add a new biclustering method to JBiclustGE\n\n\nFigure below presents the main steps to integrate a new biclustering method in JBiclustGE API.\n\n\n\n\nAbstract class AbstractBiclusteringAlgorithmCaller\n\n\nNext figure shows the main methods that are imposed to the subclasses of AbstractBiclusteringAlgorithmCaller. Thus, when the new biclustering method class is extended to this abstract class, these methods should be adapted properly to the respective biclustering method.\n\n\n\n\nImportant methods that must be take into consideration when a class is extended to AbstractBiclusteringAlgorithmCaller:\n\n\n\n\n\n\nThe implemented class must be able to read a configuration of a given biclustering algorithm from a text file, which is loaded through method \"setAlgorithmProperties(Properties props)\". The configurations in that text file are set by a key=value parameterization, as presented below: \n\n\n algorithm_parameter_john_doe1 = something_1\n algorithm_parameter_john_doe2 = something_2\n\n\n\n\n\n\n\nThe implemented class must allow to instantiate an object \"AlgorithmProperties\" containing the configurations of biclustering algorithm. Because is that object that will allow to write these configurations to a text file, or use them in internal operations of JBiclustGE. Adjust method  \"AlgorithmProperties getAlgorithmAllowedProperties()\" to your algorithm. \n\n\n\n\n\n\nAbstract class RBiclustAlgorithmCaller\n\n\nBiclustering methods developed in R programming language can be used by creating the respective java class that extends to RBiclustAlgorithmCaller. This abstract class includes several methods to link the Java environment to R environment through \nRsession\n library. Thus, its necessary to have some knowledge about this library, such as, how the R commands can be defined in Rsession and how the objects produced in R environment can be returned to Java environment or vice versa. For that visit the Rsession \nwebsite\n that contains all the instructions to perform such operations.  \n\n\nFigure presented below shows the main methods imposed by this class to their subclasses. There are two methods that need to be highlighted:\n\n\n ArrayList<RPackageInfo> requiredLibraries()  <-- defines which R packages are needed to load in R environment, in order to execute the biclustering algorithm.\n\n ArrayList<String> loadSources() <-- loads a given R source file in R environment, which can be useful to load/run several functions by means of a R script, or even to load a biclustering algorithm implemented in a R source file.\n\n\n\nIt is also important to emphasize that it is necessary to create a method that can return the biclustering results from R environment, and convert them into a \nBiclusterList\n object. Such operations must be created using the Rsession library.    \n\n\n\n\nInterface IBiclustWrapper\n\n\nThis interface forces to assign the name of the executable of the biclustering method and the path for such binary executable.   \n\n\nBiclusterList and BiclusterResult objects\n\n\nThe biclustering results must be transformed to a \"BiclusterList\" object that agregates each one of the biclusters separately, in a object denominated as \"BiclusterResult\". Thus, each implemented algorithm has to build a \"BiclusterList\" object that aggregates the results of such algorithm, following a procedure similar to the one shown in the figure below. \n\n\n\n\nHow to run a biclustering method:\n\n\nBicatYeast.csv dataset for example presented bellow, \ndownload\n\n\n    public static void main(String[] args) throws FileNotFoundException, IOException, MissingValueImputationException, ParseException {\n\n\n    URL dataUrl=HowToRunBiclusteringMethods.class.getResource(\"/BicatYeast.csv\");\n\n    // load expression dataset from file //\n    ExpressionData expressiondataset=ExpressionData.importFromTXTFormat(dataUrl.getFile()).load();\n\n\n    // Example how to run CPB algorithm  //\n    CPBMethod cpb=new CPBMethod(expressiondataset);\n\n    //  for instance change number cluster to seed//\n    cpb.setNumberBiclustersToSeed(200);\n\n    // run algorithm //\n    cpb.run();\n\n    // get results obtained by the algorithm //\n    BiclusterList cpblistresults=cpb.getBiclusterResultList();\n\n    //print the results//\n    cpblistresults.printResults();\n\n\n    ///////////////////////// Run Plaid example ////////////////////////////////////////\n    // methods that were developed in R or belongs to R package starts with R letter //\n\n    // initialize plaid method //\n    RPlaidMethod plaid=new RPlaidMethod();\n\n    // add expression dataset //\n    plaid.setExpressionData(expressiondataset);\n\n    // change the parameters that needed to be changed... //\n    plaid.addClusterType(BCPlaidClusterType.COLUMNS);\n\n    plaid.run();\n\n    // Use this function after running a algorithm that uses R environment, this allows to shutdown the R session. //\n    RConnector.closeSession();\n\n    BiclusterList plaidresults=plaid.getBiclusterResultList();\n\n    }\n\n\n\nHow to run the biclustering methods in MultiThread\n\n\n     public static void main(String[] args) throws Exception {\n\n\n    URL dataUrl=HowToRunBiclusteringMethods.class.getResource(\"/BicatYeast.csv\");\n    ExpressionData expressiondataset=ExpressionData.importFromTXTFormat(dataUrl.getFile()).load();\n\n    /*\n     * Configure methods\n     */\n\n    /*\n     * initialize list of task with methods that will be run in parallel\n     */\n    ArrayList<BiclusteringTask> methodstasklist=new ArrayList<>();\n\n    /*\n     *  add each task one by one\n     */\n    BibitMethod bibit=new BibitMethod(expressiondataset);\n    methodstasklist.add(new BiclusteringTask(bibit));\n\n\n    RFabiaMethod fabia=new RFabiaMethod(expressiondataset);\n    methodstasklist.add(new BiclusteringTask(fabia));\n\n    /*\n     * Or use BiclusteringTasksFunctions to create a list of tasks\n     */\n\n    RIsaMethod isa=new RIsaMethod(expressiondataset);\n    CPBMethod cpb=new CPBMethod(expressiondataset);\n    QuBicMethod quibic=new QuBicMethod(expressiondataset);\n    UnibicMethod unibic=new UnibicMethod(expressiondataset);\n\n\n    methodstasklist.addAll(BiclusteringTasksFunctions.createListOfBiclusteringTasks(isa,cpb,quibic,unibic));\n\n    /*\n     * After creating the list of tasks, use the MultiThreadBiclusteringTaskExecutor to execute these tasks\n     */\n\n    // the output is the list of biclusters provided by the diferent biclustering algorithms, in the same order of the list of tasks.\n    List<BiclusterList> results=MultiThreadBiclusteringTaskExecutor.run(4, methodstasklist);\n\n    for (int i = 0; i < results.size(); i++) {\n        results.get(i).printResults();\n    }\n\n    /*\n     * Close R session connection\n     */\n    RConnector.closeSession();\n\n   }\n\n\n\nExecuting the Gene Set Enrichment analysis engines\n\n\necoli_example.csv dataset for example presented bellow, \ndownload\n\n\nOntologizer\n\n\n    public static void main(String[] args) throws Exception {\n\n\n    URL dataUrl=OntologizerExample.class.getResource(\"/ecoli_example.csv\");\n\n    // load expression dataset from file\n    ExpressionData expressiondataset=ExpressionData.importFromTXTFormat(dataUrl.getFile()).load();\n\n    RIsaMethod isa=new RIsaMethod(expressiondataset);\n    isa.run();\n\n    /*\n     * initialize ontologizer analyser\n     */\n    OntologizerEnrichmentAnalyser analyser=new OntologizerEnrichmentAnalyser(isa.getBiclusterResultList(), StandardAnnotationFile.Escherichiacoli);\n\n    /*\n     * setup ontologizer parameters \n     */\n    analyser.addCalculationMethod(OntologizerCalculationMethod.TermForTerm);\n    analyser.addMultipleTestcorrectionMethod(OntologizerMTCMethod.Bonferroni);\n\n    analyser.run();\n\n    /*\n     * get results processed by ontologizer\n     */\n    EnrichmentAnalysisResultList results=analyser.getEnrichmentAnalysisResults();\n\n    /*\n     * filter results with a pvalue lower than 0.01 and with adjusted pvalues\n     */\n    results.filterAndProcessResults(0.01, true);\n\n    /*\n     * get only  biclusters that have enriched genes\n     */\n    EnrichedBiclusterList enrichedbiclusters= results.getEnrichedBiclusterList();\n\n    enrichedbiclusters.printResults();\n\n}\n\n\n\ntopGO\n\n\n    public static void main(String[] args) throws Exception {\n\n\n    URL dataUrl=HowToRunBiclusteringMethods.class.getResource(\"/ecoli_example.csv\");\n\n    // load expression dataset from file\n    ExpressionData expressiondataset=ExpressionData.importFromTXTFormat(dataUrl.getFile()).load();\n\n    RIsaMethod isa=new RIsaMethod(expressiondataset);\n    isa.run();\n\n\n    TopGOEnrichmentAnalyser analyser=new TopGOEnrichmentAnalyser(isa.getBiclusterResultList(), \"org.EcK12.eg.db\", true, TopGOMappingType.Symbol);\n    analyser.run();\n\n    EnrichmentAnalysisResultList results=analyser.getEnrichmentAnalysisResults();\n\n    /*\n     * process results with a pvalue lower than 0.05\n     */\n    results.filterAndProcessResults(0.05, false);\n\n    System.out.println(results.getPercentageEnrichedBiclusters());\n\n\n}\n\n\n\nPost-processing Analysis\n\n\nCoherence\n\n\n    public static void main(String[] args) throws FileNotFoundException, IOException, MissingValueImputationException, ParseException {\n\n\n\n    URL dataUrl=OntologizerExample.class.getResource(\"/ecoli_example.csv\");\n\n    // load expression dataset from file\n    ExpressionData expressiondataset=ExpressionData.importFromTXTFormat(dataUrl.getFile()).load();\n\n    // run unibic method over dataset\n    UnibicMethod unibic=new UnibicMethod(expressiondataset);\n    unibic.run();\n\n\n    /*\n     * Perform coherence anlaysis\n     */\n\n    // check multiplicative variance in all biclusters //\n    LinkedHashMap<Integer, Double> multivar= CoherenceAnalyser.getMultiplicativeVarianceForBiclusterList(unibic.getBiclusterResultList(), AnalysisTypeDimension.BOTH);\n    for (Integer bic : multivar.keySet()) {\n        System.out.println(\"Multiplicative variance of bicluster \"+(bic+1)+\" its: \"+multivar.get(bic));\n    }\n\n    System.out.println(\"\\n\\n\");\n    // check additive variance in all biclusters //\n    LinkedHashMap<Integer, Double> addvar= CoherenceAnalyser.getAdditiveVarianceForBiclusterList(unibic.getBiclusterResultList(), AnalysisTypeDimension.BOTH);\n    for (Integer bic : addvar.keySet()) {\n        System.out.println(\"Additive variance of bicluster \"+(bic+1)+\" its: \"+addvar.get(bic));\n    }\n\n    System.out.println(\"\\n\\n\");\n    // check constant variance in all biclusters //\n    LinkedHashMap<Integer, Double> constvar= CoherenceAnalyser.getConstantVarianceForBiclusterList(unibic.getBiclusterResultList(), AnalysisTypeDimension.BOTH);\n    for (Integer bic : constvar.keySet()) {\n        System.out.println(\"Constant variance of bicluster \"+(bic+1)+\" its: \"+constvar.get(bic));\n    }\n\n     System.out.println(\"\\n\\n\");\n     // check sign variance in all biclusters //\n    LinkedHashMap<Integer, Double> signvar= CoherenceAnalyser.getSignVarianceForBiclusterList(unibic.getBiclusterResultList(), AnalysisTypeDimension.BOTH);\n    for (Integer bic : signvar.keySet()) {\n        System.out.println(\"Sign variance of bicluster \"+(bic+1)+\" its: \"+signvar.get(bic));\n    }\n\n\n\n}\n\n\n\nCoverage\n\n\n public static void main(String[] args) throws FileNotFoundException, IOException, MissingValueImputationException, ParseException {\n\n    URL dataUrl=OntologizerExample.class.getResource(\"/ecoli_example.csv\");\n\n    // load expression dataset from file //\n    ExpressionData expressiondataset=ExpressionData.importFromTXTFormat(dataUrl.getFile()).load();\n\n    // run unibic method over dataset //\n    UnibicMethod unibic=new UnibicMethod(expressiondataset);\n    unibic.run();\n\n    CoverageAnalyser coverage=new CoverageAnalyser(unibic.getBiclusterResultList());\n\n    System.out.println(\"Total genes coverage: \"+coverage.getTotalgenescoverage()*100+\"%\\n\");\n    System.out.println(\"Total conditions coverage: \"+coverage.getTotalconditionscoverage()*100+\"%\\n\");\n    System.out.println(\"Total matrix coverage: \"+coverage.getTotalmatrixcoverage()*100+\"%\\n\");\n}\n\n\n\nOverlap\n\n\n   public static void main(String[] args) throws Exception {\n\n    // change log level //\n    LogMessageCenter.getLogger().setLogLevel(MTULogLevel.DEBUG);\n\n    URL dataUrl=OntologizerExample.class.getResource(\"/ecoli_example.csv\");\n\n    // load expression dataset from file //\n    ExpressionData expressiondataset=ExpressionData.importFromTXTFormat(dataUrl.getFile()).load();\n\n    // run unibic method over dataset //\n    CPBMethod cpb=new CPBMethod(expressiondataset);\n\n\n    cpb.run();\n\n    BiclusterList results=cpb.getBiclusterResultList();\n\n    // check overlap between bicluster 1 and 2\n    System.out.println(\"overlap between bicluster 1 and 2: \"+OverlapAnalyser.getOverlapBeetwenTwoBiclusters(results.get(0), results.get(1)));\n\n\n\n    // remove biclusters that have an overlap higher than a threshold\n\n    BiclusterList filteredlist=OverlapAnalyser.filterBiclusterListWithOverlapThreshold(results, 0.2, results.size());\n    filteredlist.printResults();\n\n\n    System.out.println(\"Average Overlap: \"+OverlapAnalyser.AverageOverlap(results));\n}",
            "title": "JBiclustGE API"
        },
        {
            "location": "/manual/jbiclustgeapi/#jbiclustge-api",
            "text": "This section presents some examples of how to use JBiclustGE API, for helping the developers to use/extend the functionalities incorporated in this API.   For a detailed information of the classes implemented in this API, see the  documentation .",
            "title": "JBiclustGE API"
        },
        {
            "location": "/manual/jbiclustgeapi/#setup",
            "text": "JBiclustGE depends of several R packages to work properly, thus in the first time that JBiclustGE is executed needs to be always configured concerning to some operational aspects such as: R settings (mainly the folder to install the R packages), maximum allowed p-value, and other optional settings. There is an special class (JBiclustGESetupManager.class) that is responsible to configure, download the required algorithms/R packages,  and build the file (jbclustge.properties) that stores the settings of the application.  Important methods of class JBiclustGESetupManager:    Check if JbiclustGE Environment its configured:    boolean isconfigured= JBiclustGESetupManager.isJbiclustGEConfigured();    Setup the required algorithms in JBiclustGE:   JBiclustGESetupManager.setupJBiclustGEMethodsEnvironment(null)\n or \n JBiclustGESetupManager.setupJBiclustGEMethodsEnvironment(\"/path_chosen_by_user\");    Initializes the jbiclustge.properties file:  JBiclustGESetupManager.setupJBiclustGEProperties(\"Path to R library\");    Reset the previous configuration of JBiclustGE:  JBiclustGESetupManager.resetPreviousConfiguration();",
            "title": "Setup"
        },
        {
            "location": "/manual/jbiclustgeapi/#biclustering-algorithms",
            "text": "All the biclustering algorithms extends to a main abstract class (jbiclustge.methods.algorithms.AbstractBiclusteringAlgorithmCaller), that contains all the methods that are necessary to establish a biclustering method in this API. Figure below shows a generic UML scheme concerning to all the biclustering methods integrated in this API.",
            "title": "Biclustering Algorithms"
        },
        {
            "location": "/manual/jbiclustgeapi/#extending-jbiclustge-with-new-biclustering-methods",
            "text": "All the biclustering algorithms have to extend to the abstract class \"AbstractBiclusteringAlgorithmCaller\". However, JBiclustGE follows a given structure (presented in figure above) for the incorporation of new biclustering methods, which is:   All the biclustering methods implemented in Java programming language extends directly to \"AbstractBiclusteringAlgorithmCaller\".  All the biclustering methods implemented in R programming language extends to class \"RBiclustAlgorithmCaller\".  All the biclustering methods implemented as binary executables using C, C++, Java, or other programming languages, have to extend to \"AbstractBiclusteringAlgorithmCaller\" and implement the interface \"IBiclustWrapper\".   Note: in order to avoid the definition of environment variables in Java to external libraries (e.g. libraries produced by Java Native Interface), is advisable to create a parsing routine that transforms the output (file with the resulting biclusters) of a given algorithm to the format used by the JBiclustGE.   If you want to extend the JBiclustGE-GUI by including your new biclustering method, follow this  instructions",
            "title": "Extending JBiclustGE with new biclustering methods:"
        },
        {
            "location": "/manual/jbiclustgeapi/#general-procedure-to-add-a-new-biclustering-method-to-jbiclustge",
            "text": "Figure below presents the main steps to integrate a new biclustering method in JBiclustGE API.",
            "title": "General procedure to add a new biclustering method to JBiclustGE"
        },
        {
            "location": "/manual/jbiclustgeapi/#abstract-class-abstractbiclusteringalgorithmcaller",
            "text": "Next figure shows the main methods that are imposed to the subclasses of AbstractBiclusteringAlgorithmCaller. Thus, when the new biclustering method class is extended to this abstract class, these methods should be adapted properly to the respective biclustering method.   Important methods that must be take into consideration when a class is extended to AbstractBiclusteringAlgorithmCaller:    The implemented class must be able to read a configuration of a given biclustering algorithm from a text file, which is loaded through method \"setAlgorithmProperties(Properties props)\". The configurations in that text file are set by a key=value parameterization, as presented below:    algorithm_parameter_john_doe1 = something_1\n algorithm_parameter_john_doe2 = something_2    The implemented class must allow to instantiate an object \"AlgorithmProperties\" containing the configurations of biclustering algorithm. Because is that object that will allow to write these configurations to a text file, or use them in internal operations of JBiclustGE. Adjust method  \"AlgorithmProperties getAlgorithmAllowedProperties()\" to your algorithm.",
            "title": "Abstract class AbstractBiclusteringAlgorithmCaller"
        },
        {
            "location": "/manual/jbiclustgeapi/#abstract-class-rbiclustalgorithmcaller",
            "text": "Biclustering methods developed in R programming language can be used by creating the respective java class that extends to RBiclustAlgorithmCaller. This abstract class includes several methods to link the Java environment to R environment through  Rsession  library. Thus, its necessary to have some knowledge about this library, such as, how the R commands can be defined in Rsession and how the objects produced in R environment can be returned to Java environment or vice versa. For that visit the Rsession  website  that contains all the instructions to perform such operations.    Figure presented below shows the main methods imposed by this class to their subclasses. There are two methods that need to be highlighted:   ArrayList<RPackageInfo> requiredLibraries()  <-- defines which R packages are needed to load in R environment, in order to execute the biclustering algorithm.\n\n ArrayList<String> loadSources() <-- loads a given R source file in R environment, which can be useful to load/run several functions by means of a R script, or even to load a biclustering algorithm implemented in a R source file.  It is also important to emphasize that it is necessary to create a method that can return the biclustering results from R environment, and convert them into a  BiclusterList  object. Such operations must be created using the Rsession library.",
            "title": "Abstract class RBiclustAlgorithmCaller"
        },
        {
            "location": "/manual/jbiclustgeapi/#interface-ibiclustwrapper",
            "text": "This interface forces to assign the name of the executable of the biclustering method and the path for such binary executable.",
            "title": "Interface IBiclustWrapper"
        },
        {
            "location": "/manual/jbiclustgeapi/#biclusterlist-and-biclusterresult-objects",
            "text": "The biclustering results must be transformed to a \"BiclusterList\" object that agregates each one of the biclusters separately, in a object denominated as \"BiclusterResult\". Thus, each implemented algorithm has to build a \"BiclusterList\" object that aggregates the results of such algorithm, following a procedure similar to the one shown in the figure below.",
            "title": "BiclusterList and BiclusterResult objects"
        },
        {
            "location": "/manual/jbiclustgeapi/#how-to-run-a-biclustering-method",
            "text": "BicatYeast.csv dataset for example presented bellow,  download      public static void main(String[] args) throws FileNotFoundException, IOException, MissingValueImputationException, ParseException {\n\n\n    URL dataUrl=HowToRunBiclusteringMethods.class.getResource(\"/BicatYeast.csv\");\n\n    // load expression dataset from file //\n    ExpressionData expressiondataset=ExpressionData.importFromTXTFormat(dataUrl.getFile()).load();\n\n\n    // Example how to run CPB algorithm  //\n    CPBMethod cpb=new CPBMethod(expressiondataset);\n\n    //  for instance change number cluster to seed//\n    cpb.setNumberBiclustersToSeed(200);\n\n    // run algorithm //\n    cpb.run();\n\n    // get results obtained by the algorithm //\n    BiclusterList cpblistresults=cpb.getBiclusterResultList();\n\n    //print the results//\n    cpblistresults.printResults();\n\n\n    ///////////////////////// Run Plaid example ////////////////////////////////////////\n    // methods that were developed in R or belongs to R package starts with R letter //\n\n    // initialize plaid method //\n    RPlaidMethod plaid=new RPlaidMethod();\n\n    // add expression dataset //\n    plaid.setExpressionData(expressiondataset);\n\n    // change the parameters that needed to be changed... //\n    plaid.addClusterType(BCPlaidClusterType.COLUMNS);\n\n    plaid.run();\n\n    // Use this function after running a algorithm that uses R environment, this allows to shutdown the R session. //\n    RConnector.closeSession();\n\n    BiclusterList plaidresults=plaid.getBiclusterResultList();\n\n    }",
            "title": "How to run a biclustering method:"
        },
        {
            "location": "/manual/jbiclustgeapi/#how-to-run-the-biclustering-methods-in-multithread",
            "text": "public static void main(String[] args) throws Exception {\n\n\n    URL dataUrl=HowToRunBiclusteringMethods.class.getResource(\"/BicatYeast.csv\");\n    ExpressionData expressiondataset=ExpressionData.importFromTXTFormat(dataUrl.getFile()).load();\n\n    /*\n     * Configure methods\n     */\n\n    /*\n     * initialize list of task with methods that will be run in parallel\n     */\n    ArrayList<BiclusteringTask> methodstasklist=new ArrayList<>();\n\n    /*\n     *  add each task one by one\n     */\n    BibitMethod bibit=new BibitMethod(expressiondataset);\n    methodstasklist.add(new BiclusteringTask(bibit));\n\n\n    RFabiaMethod fabia=new RFabiaMethod(expressiondataset);\n    methodstasklist.add(new BiclusteringTask(fabia));\n\n    /*\n     * Or use BiclusteringTasksFunctions to create a list of tasks\n     */\n\n    RIsaMethod isa=new RIsaMethod(expressiondataset);\n    CPBMethod cpb=new CPBMethod(expressiondataset);\n    QuBicMethod quibic=new QuBicMethod(expressiondataset);\n    UnibicMethod unibic=new UnibicMethod(expressiondataset);\n\n\n    methodstasklist.addAll(BiclusteringTasksFunctions.createListOfBiclusteringTasks(isa,cpb,quibic,unibic));\n\n    /*\n     * After creating the list of tasks, use the MultiThreadBiclusteringTaskExecutor to execute these tasks\n     */\n\n    // the output is the list of biclusters provided by the diferent biclustering algorithms, in the same order of the list of tasks.\n    List<BiclusterList> results=MultiThreadBiclusteringTaskExecutor.run(4, methodstasklist);\n\n    for (int i = 0; i < results.size(); i++) {\n        results.get(i).printResults();\n    }\n\n    /*\n     * Close R session connection\n     */\n    RConnector.closeSession();\n\n   }",
            "title": "How to run the biclustering methods in MultiThread"
        },
        {
            "location": "/manual/jbiclustgeapi/#executing-the-gene-set-enrichment-analysis-engines",
            "text": "ecoli_example.csv dataset for example presented bellow,  download",
            "title": "Executing the Gene Set Enrichment analysis engines"
        },
        {
            "location": "/manual/jbiclustgeapi/#ontologizer",
            "text": "public static void main(String[] args) throws Exception {\n\n\n    URL dataUrl=OntologizerExample.class.getResource(\"/ecoli_example.csv\");\n\n    // load expression dataset from file\n    ExpressionData expressiondataset=ExpressionData.importFromTXTFormat(dataUrl.getFile()).load();\n\n    RIsaMethod isa=new RIsaMethod(expressiondataset);\n    isa.run();\n\n    /*\n     * initialize ontologizer analyser\n     */\n    OntologizerEnrichmentAnalyser analyser=new OntologizerEnrichmentAnalyser(isa.getBiclusterResultList(), StandardAnnotationFile.Escherichiacoli);\n\n    /*\n     * setup ontologizer parameters \n     */\n    analyser.addCalculationMethod(OntologizerCalculationMethod.TermForTerm);\n    analyser.addMultipleTestcorrectionMethod(OntologizerMTCMethod.Bonferroni);\n\n    analyser.run();\n\n    /*\n     * get results processed by ontologizer\n     */\n    EnrichmentAnalysisResultList results=analyser.getEnrichmentAnalysisResults();\n\n    /*\n     * filter results with a pvalue lower than 0.01 and with adjusted pvalues\n     */\n    results.filterAndProcessResults(0.01, true);\n\n    /*\n     * get only  biclusters that have enriched genes\n     */\n    EnrichedBiclusterList enrichedbiclusters= results.getEnrichedBiclusterList();\n\n    enrichedbiclusters.printResults();\n\n}",
            "title": "Ontologizer"
        },
        {
            "location": "/manual/jbiclustgeapi/#topgo",
            "text": "public static void main(String[] args) throws Exception {\n\n\n    URL dataUrl=HowToRunBiclusteringMethods.class.getResource(\"/ecoli_example.csv\");\n\n    // load expression dataset from file\n    ExpressionData expressiondataset=ExpressionData.importFromTXTFormat(dataUrl.getFile()).load();\n\n    RIsaMethod isa=new RIsaMethod(expressiondataset);\n    isa.run();\n\n\n    TopGOEnrichmentAnalyser analyser=new TopGOEnrichmentAnalyser(isa.getBiclusterResultList(), \"org.EcK12.eg.db\", true, TopGOMappingType.Symbol);\n    analyser.run();\n\n    EnrichmentAnalysisResultList results=analyser.getEnrichmentAnalysisResults();\n\n    /*\n     * process results with a pvalue lower than 0.05\n     */\n    results.filterAndProcessResults(0.05, false);\n\n    System.out.println(results.getPercentageEnrichedBiclusters());\n\n\n}",
            "title": "topGO"
        },
        {
            "location": "/manual/jbiclustgeapi/#post-processing-analysis",
            "text": "",
            "title": "Post-processing Analysis"
        },
        {
            "location": "/manual/jbiclustgeapi/#coherence",
            "text": "public static void main(String[] args) throws FileNotFoundException, IOException, MissingValueImputationException, ParseException {\n\n\n\n    URL dataUrl=OntologizerExample.class.getResource(\"/ecoli_example.csv\");\n\n    // load expression dataset from file\n    ExpressionData expressiondataset=ExpressionData.importFromTXTFormat(dataUrl.getFile()).load();\n\n    // run unibic method over dataset\n    UnibicMethod unibic=new UnibicMethod(expressiondataset);\n    unibic.run();\n\n\n    /*\n     * Perform coherence anlaysis\n     */\n\n    // check multiplicative variance in all biclusters //\n    LinkedHashMap<Integer, Double> multivar= CoherenceAnalyser.getMultiplicativeVarianceForBiclusterList(unibic.getBiclusterResultList(), AnalysisTypeDimension.BOTH);\n    for (Integer bic : multivar.keySet()) {\n        System.out.println(\"Multiplicative variance of bicluster \"+(bic+1)+\" its: \"+multivar.get(bic));\n    }\n\n    System.out.println(\"\\n\\n\");\n    // check additive variance in all biclusters //\n    LinkedHashMap<Integer, Double> addvar= CoherenceAnalyser.getAdditiveVarianceForBiclusterList(unibic.getBiclusterResultList(), AnalysisTypeDimension.BOTH);\n    for (Integer bic : addvar.keySet()) {\n        System.out.println(\"Additive variance of bicluster \"+(bic+1)+\" its: \"+addvar.get(bic));\n    }\n\n    System.out.println(\"\\n\\n\");\n    // check constant variance in all biclusters //\n    LinkedHashMap<Integer, Double> constvar= CoherenceAnalyser.getConstantVarianceForBiclusterList(unibic.getBiclusterResultList(), AnalysisTypeDimension.BOTH);\n    for (Integer bic : constvar.keySet()) {\n        System.out.println(\"Constant variance of bicluster \"+(bic+1)+\" its: \"+constvar.get(bic));\n    }\n\n     System.out.println(\"\\n\\n\");\n     // check sign variance in all biclusters //\n    LinkedHashMap<Integer, Double> signvar= CoherenceAnalyser.getSignVarianceForBiclusterList(unibic.getBiclusterResultList(), AnalysisTypeDimension.BOTH);\n    for (Integer bic : signvar.keySet()) {\n        System.out.println(\"Sign variance of bicluster \"+(bic+1)+\" its: \"+signvar.get(bic));\n    }\n\n\n\n}",
            "title": "Coherence"
        },
        {
            "location": "/manual/jbiclustgeapi/#coverage",
            "text": "public static void main(String[] args) throws FileNotFoundException, IOException, MissingValueImputationException, ParseException {\n\n    URL dataUrl=OntologizerExample.class.getResource(\"/ecoli_example.csv\");\n\n    // load expression dataset from file //\n    ExpressionData expressiondataset=ExpressionData.importFromTXTFormat(dataUrl.getFile()).load();\n\n    // run unibic method over dataset //\n    UnibicMethod unibic=new UnibicMethod(expressiondataset);\n    unibic.run();\n\n    CoverageAnalyser coverage=new CoverageAnalyser(unibic.getBiclusterResultList());\n\n    System.out.println(\"Total genes coverage: \"+coverage.getTotalgenescoverage()*100+\"%\\n\");\n    System.out.println(\"Total conditions coverage: \"+coverage.getTotalconditionscoverage()*100+\"%\\n\");\n    System.out.println(\"Total matrix coverage: \"+coverage.getTotalmatrixcoverage()*100+\"%\\n\");\n}",
            "title": "Coverage"
        },
        {
            "location": "/manual/jbiclustgeapi/#overlap",
            "text": "public static void main(String[] args) throws Exception {\n\n    // change log level //\n    LogMessageCenter.getLogger().setLogLevel(MTULogLevel.DEBUG);\n\n    URL dataUrl=OntologizerExample.class.getResource(\"/ecoli_example.csv\");\n\n    // load expression dataset from file //\n    ExpressionData expressiondataset=ExpressionData.importFromTXTFormat(dataUrl.getFile()).load();\n\n    // run unibic method over dataset //\n    CPBMethod cpb=new CPBMethod(expressiondataset);\n\n\n    cpb.run();\n\n    BiclusterList results=cpb.getBiclusterResultList();\n\n    // check overlap between bicluster 1 and 2\n    System.out.println(\"overlap between bicluster 1 and 2: \"+OverlapAnalyser.getOverlapBeetwenTwoBiclusters(results.get(0), results.get(1)));\n\n\n\n    // remove biclusters that have an overlap higher than a threshold\n\n    BiclusterList filteredlist=OverlapAnalyser.filterBiclusterListWithOverlapThreshold(results, 0.2, results.size());\n    filteredlist.printResults();\n\n\n    System.out.println(\"Average Overlap: \"+OverlapAnalyser.AverageOverlap(results));\n}",
            "title": "Overlap"
        },
        {
            "location": "/manual/jbiclustgegui/",
            "text": "JBiclustGE GUI\n\n\nExtending JBiclustGE-GUI with new biclustering methods implemented in JBiclustGE API\n\n\nJBiclustGE-GUI is developed over \nAIBench\n that follows a Model-View-Controller (MVC) architectural pattern. Thus, to understand better how the functionalities of JBiclustGE-GUI can be extended, is adviseble to read the documentation concerning the \nAIBench\n.\n\n\nTo include a new biclustering method into JBiclustGE-GUI, is necessary to perform the following steps: \n\n\n\n\nCreate a class regarding to operation of your method that extends to \"AbstractMethodOperation\".\n\n\nCreate a class that will store the results obtained with your method, and that class must be extended from class \"BiclusteringResultBox\".\n\n\n\n\nDevelop the graphical interfaces to execute your biclustering algorithm with the required parameters.\n\n\n3.1  Implement the graphical interface for your method by creating a class that extends to \"AbstractMethodSettingsPanel\". \n\n\n3.2  Is necessary to implement a class that extends to abstract class \"AbstractMethodGUI\", that includes the class developed in previous step 3.1.\n\n\n\n\n\n\nIn order to serialize the results obtained by your algorithm, is necessary to register the class developed in step 2 in the class \"Lifecycle\".\n\n\n\n\nIn the file \"plugin.xml\" present in the resources folder, is necessary to link the operation class to the respective graphical interface class, and link the class that enables the visualization of the results, with the class that stores the results of your biclustering algorithm (\nsee instructions\n). \n\n\nAssign your method into \"ProfileBiclusteringMethod\" enumerator, in order to be able to create a biclustering profile.",
            "title": "JBiclustGE-GUI"
        },
        {
            "location": "/manual/jbiclustgegui/#jbiclustge-gui",
            "text": "",
            "title": "JBiclustGE GUI"
        },
        {
            "location": "/manual/jbiclustgegui/#extending-jbiclustge-gui-with-new-biclustering-methods-implemented-in-jbiclustge-api",
            "text": "JBiclustGE-GUI is developed over  AIBench  that follows a Model-View-Controller (MVC) architectural pattern. Thus, to understand better how the functionalities of JBiclustGE-GUI can be extended, is adviseble to read the documentation concerning the  AIBench .  To include a new biclustering method into JBiclustGE-GUI, is necessary to perform the following steps:    Create a class regarding to operation of your method that extends to \"AbstractMethodOperation\".  Create a class that will store the results obtained with your method, and that class must be extended from class \"BiclusteringResultBox\".   Develop the graphical interfaces to execute your biclustering algorithm with the required parameters.  3.1  Implement the graphical interface for your method by creating a class that extends to \"AbstractMethodSettingsPanel\".   3.2  Is necessary to implement a class that extends to abstract class \"AbstractMethodGUI\", that includes the class developed in previous step 3.1.    In order to serialize the results obtained by your algorithm, is necessary to register the class developed in step 2 in the class \"Lifecycle\".   In the file \"plugin.xml\" present in the resources folder, is necessary to link the operation class to the respective graphical interface class, and link the class that enables the visualization of the results, with the class that stores the results of your biclustering algorithm ( see instructions ).   Assign your method into \"ProfileBiclusteringMethod\" enumerator, in order to be able to create a biclustering profile.",
            "title": "Extending JBiclustGE-GUI with new biclustering methods implemented in JBiclustGE API"
        },
        {
            "location": "/studies/studiesjbiclustge/",
            "text": "Studies performed with JBiclustGE API\n\n\nIn order to evaluate the comprised algorithms and the implemented features, several studies using both synthetic and real datasets were performed. Some examples of the results obtained in this analysis are available in the links below. Currently, we are waiting for the approval of a manuscript that was submitted to a scientific journal, describing the results obtained in this analysis. However, all the results will be made available after the consideration of the journal. \n\n\n\n\n\n\n\n\nSynthetic datasets\n\n\n\n\nStudies with synthetic data\n\n\n\n\nReal datasets\n\n\n\n\nEscherichia coli\n, the dataset used was collected from the \nMany Microbe Microarrays Database\n.\n\n\nSaccharomyces cerevisiae\n, the dataset used was collected from \nBiMax\n website.",
            "title": "Studies performed with JBiclustGE"
        },
        {
            "location": "/studies/studiesjbiclustge/#studies-performed-with-jbiclustge-api",
            "text": "In order to evaluate the comprised algorithms and the implemented features, several studies using both synthetic and real datasets were performed. Some examples of the results obtained in this analysis are available in the links below. Currently, we are waiting for the approval of a manuscript that was submitted to a scientific journal, describing the results obtained in this analysis. However, all the results will be made available after the consideration of the journal.",
            "title": "Studies performed with JBiclustGE API"
        },
        {
            "location": "/studies/studiesjbiclustge/#synthetic-datasets",
            "text": "Studies with synthetic data",
            "title": "Synthetic datasets"
        },
        {
            "location": "/studies/studiesjbiclustge/#real-datasets",
            "text": "Escherichia coli , the dataset used was collected from the  Many Microbe Microarrays Database .  Saccharomyces cerevisiae , the dataset used was collected from  BiMax  website.",
            "title": "Real datasets"
        }
    ]
}